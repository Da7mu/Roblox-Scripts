local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Da7mu NPC or DIE",
   Icon = 0,
   LoadingTitle = "NPC or DIE script",
   LoadingSubtitle = "by Da7mu",
   ShowText = "Rayfield",
   Theme = "Ocean",
   ToggleUIKeybind = "v",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("Main", 103756830741659)

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- ===== ESP FUNCTIONS =====
local espEnabled = false
local playerAddedConnection
local characterConnections = {} -- Store CharacterAdded connections for each player

local function addHighlightToCharacter(character)
    if character:FindFirstChildOfClass("Highlight") then return end
    local hl = Instance.new("Highlight")
    hl.FillColor = Color3.fromRGB(255, 255, 0)
    hl.OutlineColor = Color3.fromRGB(255, 255, 0)
    hl.FillTransparency = 0.5
    hl.Parent = character
end

local function removeHighlightFromCharacter(character)
    local hl = character:FindFirstChildOfClass("Highlight")
    if hl then
        hl:Destroy()
    end
end

local function setupPlayer(player)
    -- Remove any existing CharacterAdded connection for this player
    if characterConnections[player] then
        characterConnections[player]:Disconnect()
        characterConnections[player] = nil
    end

    -- Apply or remove highlight based on current espEnabled state
    if player.Character then
        if espEnabled then
            addHighlightToCharacter(player.Character)
        else
            removeHighlightFromCharacter(player.Character)
        end
    end

    -- Create new CharacterAdded connection that respects espEnabled
    characterConnections[player] = player.CharacterAdded:Connect(function(char)
        if espEnabled then
            addHighlightToCharacter(char)
        else
            removeHighlightFromCharacter(char)
        end
    end)
end

local function updateAllPlayers()
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            setupPlayer(p)
        end
    end
end

-- Sheriff section
local Section = Tab:CreateSection("Sheriff")
local Divider = Tab:CreateDivider()

local ToggleESP = Tab:CreateToggle({
   Name = "ESP All (Sheriff)",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(HighlightEnabled)
      espEnabled = HighlightEnabled
      if espEnabled then
         updateAllPlayers()
         playerAddedConnection = Players.PlayerAdded:Connect(function(p)
            if p ~= LocalPlayer then
               setupPlayer(p)
            end
         end)
      else
         if playerAddedConnection then
            playerAddedConnection:Disconnect()
            playerAddedConnection = nil
         end
         updateAllPlayers() -- Remove highlights from all players
      end
   end,
})

-- Handle local player respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    if espEnabled then
        updateAllPlayers() -- Reapply highlights to all players on respawn
    end
end)

-- ===== AIMLOCK VARIABLES =====
local aimlockEnabled = false
local camTarget = nil
local aimConnection

local function getClosestPlayerToCursor()
    local closestPlayer, shortestDist = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local pos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(pos.X, pos.Y)).Magnitude
                if dist < shortestDist then
                    shortestDist = dist
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

local ToggleAimlock = Tab:CreateToggle({
   Name = "Aimlock (X Toggle Lock)",
   CurrentValue = false,
   Flag = "Toggle2",
   Callback = function(Value)
      aimlockEnabled = Value
      if aimlockEnabled then
         aimConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.KeyCode == Enum.KeyCode.X then
               if camTarget then
                  camTarget = nil -- unlock
               else
                  local target = getClosestPlayerToCursor()
                  if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                     camTarget = target
                  end
               end
            end
         end)
         RunService.RenderStepped:Connect(function()
            if aimlockEnabled and camTarget and camTarget.Character and camTarget.Character:FindFirstChild("HumanoidRootPart") then
               workspace.CurrentCamera.CFrame = CFrame.new(
                  workspace.CurrentCamera.CFrame.Position,
                  camTarget.Character.HumanoidRootPart.Position
               )
            end
         end)
      else
         if aimConnection then
            aimConnection:Disconnect()
            aimConnection = nil
         end
         camTarget = nil
      end
   end,
})

-- Criminal section
local Section2 = Tab:CreateSection("Criminal")
local Divider2 = Tab:CreateDivider()

local mapNames = {
    "ClassicTown", "CrazyConstruction", "Hospital", "Hotel", "LighthouseCove",
    "Office", "PirateCove", "Prison", "RailYard", "RubyRiches", "ShoppingMall", "WesternTown"
}

local taskConnection

local function processTask()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        print("Character or HumanoidRootPart not ready")
        return
    end

    if not LocalPlayer.Team or LocalPlayer.Team.Name ~= "Criminals" then
        print("Not on Criminals team, skipping task processing")
        return
    end

    local taskName = character:GetAttribute("TaskName")
    if not taskName or taskName == "" then
        print("No TaskName assigned")
        return
    end

    local yourTask, parentTask
    for _, mapName in ipairs(mapNames) do
        local map = workspace:FindFirstChild(mapName)
        if map and map:FindFirstChild("Tasks") then
            for _, task in ipairs(map.Tasks:GetChildren()) do
                local prompt = task:FindFirstChildOfClass("ProximityPrompt")
                if prompt and task:FindFirstChild("TaskTargetHighlight") and task.Name == taskName then
                    yourTask = prompt
                    parentTask = task
                    break
                end
            end
        end
        if yourTask then break end
    end

    if not yourTask then
        print("No valid ProximityPrompt found for task:", taskName)
        return
    end

    local hrp = character.HumanoidRootPart
    if yourTask.Parent ~= hrp then
        yourTask.Parent = hrp
        yourTask.MaxActivationDistance = 10
        yourTask.HoldDuration = 0
        print("Attached prompt for task:", taskName)
    end

    if yourTask:IsDescendantOf(game) and yourTask.Enabled then
        pcall(function()
            while character:GetAttribute("TaskName") == taskName and yourTask:IsDescendantOf(game) and yourTask.Enabled do
                yourTask:InputHoldBegin()
                task.wait(0.1)
                yourTask:InputHoldEnd()
                print("Triggered prompt for task:", taskName)
                task.wait(0.1)
            end
            print("Task completed or changed for:", taskName)
        end)
    else
        print("Prompt not triggerable for task:", taskName, "Enabled:", yourTask.Enabled)
    end

    if yourTask.Parent == hrp and parentTask then
        yourTask.Parent = parentTask
        print("Returned prompt to original parent for task:", taskName)
    end
end

local TaskToggle = Tab:CreateToggle({
   Name = "Autofarm Tasks",
   CurrentValue = false,
   Flag = "TaskToggle",
   Callback = function(Value)
      if Value then
         task.wait(2)
         print("Starting task processing")
         processTask()
         taskConnection = RunService.Heartbeat:Connect(function()
            processTask()
         end)
      else
         if taskConnection then
            taskConnection:Disconnect()
            taskConnection = nil
         end
         print("Autofarm Tasks stopped")
      end
   end,
})

LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    task.wait(0.5)
    print("Character respawned, processing task")
    if TaskToggle.CurrentValue then
        processTask()
    end
end)

local speed = 0

local SpeedSlider = Tab:CreateSlider({
   Name = "Speed",
   Range = {0, 10},
   Increment = 0.2,
   Suffix = "Speed",
   CurrentValue = 0,
   Flag = "SpeedSlider",
   Callback = function(Value)
      speed = Value
   end,
})

local playerChar = Players.LocalPlayer
local movementConnection

local function bindCharacter(char)
    if movementConnection then
        movementConnection:Disconnect()
        movementConnection = nil
    end

    local humanoid = char:WaitForChild("Humanoid")
    local hrp = char:WaitForChild("HumanoidRootPart")

    movementConnection = RunService.RenderStepped:Connect(function()
        local moveDir = humanoid.MoveDirection
        if moveDir.Magnitude > 0 then
            hrp.CFrame = hrp.CFrame + (moveDir * speed)
        end
    end)
end

local char = playerChar.Character or playerChar.CharacterAdded:Wait()
bindCharacter(char)

playerChar.CharacterAdded:Connect(function(ch)
    bindCharacter(ch)
end)


local Tab = Window:CreateTab("Misc", 71263709512536) -- Title, Image

local Paragraph = Tab:CreateParagraph({Title = "CREDITS:", Content = "Made by Da7mu on discord and on Rscripts.net"})
local Paragraph = Tab:CreateParagraph({Title = "CREDITS:", Content = "made with e-vil.com"})




















Rayfield:Notify({
   Title = "BE AWARE",
   Content = "The Autofarm Tasks toggle works and its not Bugged, it just takes time for it to Finish a Task",
   Duration = 15,
   Image = 4483362458,
})



Rayfield:LoadConfiguration()
